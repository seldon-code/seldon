[simulation]
model = "ActivityDriven"
rng_seed = 120           # Leaving this empty will pick a random seed

[io]
n_output_network = 1  # Write the network every 20 iterations
n_output_agents = 1 # Write the opinions of agents after every iteration
print_progress = true # Print the iteration time; if not set, then always print
output_initial = true # Print the initial opinions and network file from step 0. If not set, this is true by default.
start_output = 1 # Start writing out opinions and/or network files from this iteration. If not set, this is 1.

[model]
max_iterations = 1000 # If not set, max iterations is infinite

[ActivityDriven]
dt = 0.01               # Timestep for the integration of the coupled ODEs
m = 10                  # Number of agents contacted, when the agent is active
eps = 0.01              # Minimum activity epsilon; a_i belongs to [epsilon,1]
gamma = 2.1             # Exponent of activity power law distribution of activities
reciprocity = 0.5       # probability that when agent i contacts j via weighted reservoir sampling, j also sends feedback to i. So every agent can have more than m incoming connections
homophily = 3.0         # aka beta. if zero, agents pick their interaction partners at random
alpha = 0.25            # Controversialness of the issue, must be greater than 0.
K = 3.0                 # Social interaction strength
mean_activities = false # Use the mean value of the powerlaw distribution for the activities of all agents
mean_weights = false

n_bots = 2 # The number of bots to be used; if not specified defaults to 0 (which means bots are deactivated)
# Bots are agents with fixed opinions and different parameters, the parameters are specified in the following lists
# If n_bots is smaller than the length of any of the lists, the first n_bots entries are used. If n_bots is greater the code will throw an exception.
bot_m = [300, 300]         # If not specified, defaults to `m`
bot_homophily = [0.7, 0.2] # If not specified, defaults to `homophily`
bot_activity = [1.0, 1.0]  # If not specified, defaults to 0
bot_opinion = [-2, 2]      # The fixed opinions of the bots

[network]
number_of_agents = 1000
connections_per_agent = 5
